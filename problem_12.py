# The sequence of triangle numbers is generated by adding the natural numbers. So
# the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
# terms would be:

#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#     Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#      10: 1,2,5,10
#      15: 1,3,5,15
#      21: 1,3,7,21
#      28: 1,2,4,7,14,28

# We can see that 28 is the first triangle
# number to have over five divisors.

# What is the value of the first triangle
# number to have over five hundred
# divisors?
import cProfile
from helpers import profiling

def triangular_number(n):
    return (n**2 + n)/2

def divisors(num):
    count = 2 # 1 and self
    i = 2
    while i < num**(0.5):
        if num % i == 0:
            count += 2
        i += 1

    if int(num**(0.5))**2 == num: #square number?
        count += 1
    return count

def so_many_divisors(count):
    i = 1
    while True:
        triang = triangular_number(i)
        num = divisors(triang)
        if num > count:
            return triangular_number(i)
        i+= 1


#Solution with more compelx math (computing prime factorization)
def factors(num):
    i = 2
    prod = 1
    div2 = (True if num % 2 == 0 else False)
    while num > 1:
        counter = 1
        while num % i == 0:
            counter +=1
            num /= i
        if div2:
            counter -= 1
            div2 = False
        prod *= counter
        i += 1
            
    return prod

def num_w_divisors(divs):
    i = 2
    prev_facs = 1
    while True:
        next_facs = factors(i)
        if prev_facs * next_facs > divs:
            return ( i * (i -1))/2
        prev_facs = next_facs
        i += 1

cProfile.run("num_w_divisors(500)") #3s
#cProfile.run("so_many_divisors(500)")  #16s

